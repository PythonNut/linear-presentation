def OU_to_nums(gc):
    """
    convert an input gauss code of the form
    (str):  "O1-O2-U1-U2-..."
    to the nelson gauss code format
    (list): [1.5, 2.5, -1.5, -2.5, ...]
    """
    new_gc = []
    segs = [gc[3 * i : 3 * i + 3] for i in range(len(mystr) // 3)]
    for seg in segs:
        n = int(seg[1])
        if seg[2] == "-":
            n += 0.5
        if seg[0] == "U":
            n *= -1
        new_gc += n
    return new_gc


def get_cnum(c):
    """
    Extract the crossing number corresponding to an entry in a gauss code.

    Args:

    Crossings in our gauss code are formatted like

    (+/-) (crossing number).(0/0.5)

    where (+) indicates we're on an overstrand, (-) indicates we're on an
    understrand, a trailing (.0) indicates the crossing is positive, and a
    trailing (.5) indicates the crossing is negative.
    """

    if c < 0:
        if c % 1 != 0:
            c += 0.5
    else:
        if c % 1 != 0:
            c -= 0.5

    return int(abs(c))


def conn_sum(gcode0, gcode1, ind=0):
    c0nums = {get_cnum(c) for c in gcode0}
    cmax = max(c0nums)
    print(cmax)
    gcode1 = [c + cmax if c > 0 else c - cmax for c in gcode1]
    return gcode0[:ind] + gcode1 + gcode0[ind:]


def multi_sum_from_gknot(idxs, inds=None):
    inds = inds or [0] * (len(idxs) - 1)
    knot = gknot[idxs[0]]
    for i, idx in zip(inds, idxs[1:]):
        knot = conn_sum(knot, gknot[idx], ind=i)
    return knot


def dt2gauss(dt):
    x, y = [], []
    for i, dti in enumerate(dt):
        x.extend((2 * i + 1, dti))

    for i in range(len(dt)):
        y.extend("ou" if x[2 * i + 1] > 0 else "uo")

    gauss = []
    for i in range(1, len(x) + 1):
        j = x.index(i)
        gauss.append((j // 2 + 1) * (-1 if y[j] == "u" else 1))

    return gauss


def gauss2signed_gauss(gcode):
    import networkx as nx

    n = len(gcode) // 2

    G = nx.Graph()
    crossings = []
    for i in range(n):
        nodes = range(5 * i, 5 * i + 5)
        G.add_nodes_from(nodes)

        t, l, c, r, b = nodes
        G.add_edge(l, t)
        G.add_edge(r, t)
        G.add_edge(b, l)
        G.add_edge(b, r)

        crossings.append(nodes)

    for i in range(len(gcode)):
        j = (i + 1) % len(gcode)
        cross1, o1 = abs(gcode[i]), gcode[i] > 0
        cross2, o2 = abs(gcode[j]), gcode[j] > 0

        t1, l1, c1, r1, b1 = crossings[cross1 - 1]
        t2, l2, c2, r2, b2 = crossings[cross2 - 1]

        src = b1 if o1 else r1
        dst = t2 if o2 else l2

        G.add_edge(c1, src)
        G.add_edge(src, dst)
        G.add_edge(dst, c2)

    embed = nx.check_planarity(G)[1]
    orient = []

    for t, l, c, r, b in crossings:
        o = list(embed.neighbors_cw_order(c))
        if o[(o.index(t) + 1) % 4] == r:
            orient.append(+1)
        else:
            orient.append(-1)

    return [gcode], orient


# Classical knot gauss codes
gknot = {
    (0): [-1, 1],
    (3, 1): [-1, 2, -3, 1, -2, 3],
    (4, 1): [-1.5, 2.5, -3, 4, -2.5, 1.5, -4, 3],
    (5, 1): [-1, 2, -3, 4, -5, 1, -2, 3, -4, 5],
    (5, 2): [-1, 2, -3, 4, -5, 3, -2, 1, -4, 5],
    (6, 1): [-1, 2, -3.5, 4.5, -5.5, 6.5, -2, 1, -6.5, 5.5, -4.5, 3.5],
    (6, 2): [-1, 2.5, -3.5, 4.5, -5.5, 1, -6, 3.5, -4.5, 5.5, -2.5, 6],
    (6, 3): [1, -2.5, 3.5, -4.5, 2.5, -5, 6, -1, 5, -3.5, 4.5, -6],
    (6, 4): [-1, 2, -3, 1, -2, 3, -4, 5, -6, 4, -5, 6],
    (6, 5): [-1, 2, -3, 1, -2, 3, 4.5, -5.5, 6.5, -4.5, 5.5, -6.5],
    (7, 1): [-1, 2, -3, 4, -5, 6, -7, 1, -2, 3, -4, 5, -6, 7],
    (7, 2): [
        -1.5,
        6.5,
        -7.5,
        1.5,
        -2.5,
        3.5,
        -4.5,
        5.5,
        -6.5,
        7.5,
        -5.5,
        4.5,
        -3.5,
        2.5,
    ],
    (7, 3): [-1, 2, -3, 4, -7, 6, -5, 1, -2, 3, -4, 5, -6, 7],
    (7, 4): [-1, 2, -3, 4, -5, 6, -7, 1, -4, 3, -2, 7, -6, 5],
    (7, 5): [
        -1.5,
        2.5,
        -3.5,
        4.5,
        -5.5,
        1.5,
        -2.5,
        3.5,
        -6.5,
        7.5,
        -4.5,
        5.5,
        -7.5,
        6.5,
    ],
    (7, 6): [-1.5, 2.5, -3, 4, -5.5, 6.5, -4, 3, -7.5, 1.5, -6.5, 5.5, -2.5, 7.5],
    (7, 7): [-1.5, 2.5, -3, 4, -2.5, 5.5, -6, 7, -5.5, 1.5, -4, 3, -7, 6],
    (8, 1): [
        -1.5,
        2.5,
        -3,
        4,
        -2.5,
        1.5,
        -5.5,
        6.5,
        -7.5,
        8.5,
        -4,
        3,
        -8.5,
        7.5,
        -6.5,
        5.5,
    ],
    (8, 2): [
        1,
        -2,
        3.5,
        -4.5,
        5.5,
        -6.5,
        7.5,
        -8.5,
        2,
        -1,
        8.5,
        -3.5,
        4.5,
        -5.5,
        6.5,
        -7.5,
    ],
    (8, 3): [-1, 2, -3, 4, -5.5, 6.5, -7.5, 8.5, -4, 3, -2, 1, -8.5, 7.5, -6.5, 5.5],
    (8, 4): [-1.5, 2, -3, 4, -5, 1.5, -6.5, 7.5, -8.5, 5, -4, 3, -2, 6.5, -7.5, 8.5],
    (8, 5): [-1.5, 2.5, -3, 4, -5, 6, -7, 8, -2.5, 1.5, -6, 7, -8, 3, -4, 5],
    (8, 6): [
        1,
        -2,
        3.5,
        -4.5,
        5.5,
        -6.5,
        7.5,
        -8.5,
        2,
        -1,
        8.5,
        -7.5,
        6.5,
        -3.5,
        4.5,
        -5.5,
    ],
    (8, 7): [-1.5, 2.5, -3.5, 1.5, -4, 5, -6, 7, -8, 4, -2.5, 3.5, -5, 6, -7, 8],
    (8, 8): [1, -2, 3, -4.5, 5.5, -6.5, 4.5, -7, 8, -5.5, 6.5, -3, 2, -1, 7, -8],
    (8, 9): [-1.5, 2.5, -3.5, 4.5, -5, 6, -7, 8, -2.5, 3.5, -4.5, 1.5, -8, 5, -6, 7],
    (8, 10): [-1, 2, -3, 4, -5, 1, -2, 6.5, -7.5, 3, -4, 8.5, -6.5, 7.5, -8.5, 5],
    (8, 11): [
        1,
        -2,
        3.5,
        -4.5,
        5.5,
        -6.5,
        7.5,
        -8.5,
        2,
        -1,
        8.5,
        -5.5,
        4.5,
        -3.5,
        6.5,
        -7.5,
    ],
    (8, 12): [-1, 2, -3, 4, -5.5, 6.5, -4, 3, -7.5, 8.5, -2, 1, -8.5, 7.5, -6.5, 5.5],
    (8, 13): [1.5, -2.5, 3, -4, 5, -6, 7, -3, 8.5, -1.5, 2.5, -8.5, 4, -7, 6, -5],
    (8, 14): [
        -1,
        2,
        -3.5,
        4.5,
        -5.5,
        6.5,
        -7.5,
        5.5,
        -4.5,
        8.5,
        -2,
        1,
        -6.5,
        7.5,
        -8.5,
        3.5,
    ],
    (8, 15): [
        1.5,
        -2.5,
        3.5,
        -4.5,
        5.5,
        -3.5,
        6.5,
        -7.5,
        8.5,
        -6.5,
        2.5,
        -1.5,
        7.5,
        -8.5,
        4.5,
        -5.5,
    ],
    (8, 16): [
        1.5,
        -2,
        3,
        -4.5,
        5.5,
        -6,
        2,
        -7.5,
        4.5,
        -5.5,
        8.5,
        -1.5,
        7.5,
        -3,
        6,
        -8.5,
    ],
    (8, 17): [-1.5, 2.5, -3, 4, -5, 6, -2.5, 7.5, -4, 5, -8.5, 1.5, -6, 3, -7.5, 8.5],
    (8, 18): [-1, 2.5, -3.5, 4, -5, 6.5, -2.5, 7, -4, 8.5, -6.5, 1, -7, 3.5, -8.5, 5],
    (8, 19): [-1, 2, -3, -4, 5, 1, -2, -6, 4, 7, -8, -5, 6, 3, -7, 8],
    (8, 20): [
        -1,
        2.5,
        3,
        -4,
        -5.5,
        1,
        6.5,
        -3,
        4,
        -7.5,
        8.5,
        5.5,
        -2.5,
        -6.5,
        7.5,
        -8.5,
    ],
    (8, 21): [
        -1,
        2.5,
        -3.5,
        -4.5,
        5.5,
        -6,
        -7.5,
        1,
        4.5,
        -5.5,
        8.5,
        7.5,
        -2.5,
        3.5,
        6,
        -8.5,
    ],
    (9, 2): [
        -1.5,
        2.5,
        -3.5,
        4.5,
        -5.5,
        6.5,
        -7.5,
        8.5,
        -9.5,
        1.5,
        -2.5,
        9.5,
        -8.5,
        7.5,
        -6.5,
        5.5,
        -4.5,
        3.5,
    ],
    (9, 24): [
        -1.5,
        2.5,
        -3,
        4.5,
        -5.5,
        6,
        -7,
        8,
        -2.5,
        1.5,
        -6,
        7,
        -8,
        9.5,
        -4.5,
        5.5,
        -9.5,
        3,
    ],
    (9, 32): [
        -1.5,
        2.5,
        -3,
        4,
        -5,
        6,
        -7,
        8,
        -2.5,
        9.5,
        -4,
        7,
        -8,
        3,
        -9.5,
        1.5,
        -6,
        5,
    ],
    (10, 132): [
        1.5,
        -2.5,
        3.5,
        -1.5,
        -4,
        5.5,
        6,
        -7.5,
        -8,
        4,
        9.5,
        -6,
        -10.5,
        8,
        2.5,
        -3.5,
        7.5,
        10.5,
        -5.5,
        -9.5,
    ],
    (11, 1): [
        -1,
        2.5,
        -3.5,
        -4,
        5,
        6.5,
        -2.5,
        7,
        -8,
        3.5,
        -6.5,
        1,
        -7,
        8,
        9.5,
        -10.5,
        11.5,
        -5,
        4,
        -9.5,
        10.5,
        -11.5,
    ],
    (11, 2): [
        -1,
        2.5,
        -3.5,
        -4.5,
        5.5,
        -6.5,
        7,
        -8,
        4.5,
        -5.5,
        6.5,
        9.5,
        -2.5,
        10,
        -11,
        3.5,
        -9.5,
        1,
        -10,
        11,
        8,
        -7,
    ],
    (11, 42): [
        -1,
        2,
        3.5,
        -4,
        5,
        -6,
        7,
        -3.5,
        8.5,
        -5,
        6,
        9.5,
        -10.5,
        11.5,
        -9.5,
        1,
        -2,
        10.5,
        -11.5,
        -7,
        4,
        -8.5,
    ],
}

# Virtual knot gauss codes
# Scraped from https://www.math.toronto.edu/drorbn/Students/GreenJ/
vknot = {
    (2, 1): [1.5, 2.5, -1.5, -2.5],
    (3, 1): [1.5, 2.5, -1.5, 3, -2.5, -3],
    (3, 2): [1.5, 2, -1.5, 3.5, -2, -3.5],
    (3, 3): [1.5, 2.5, -1.5, -3.5, -2.5, 3.5],
    (3, 4): [1.5, 2, -1.5, -3.5, -2, 3.5],
    (3, 5): [1.5, 2.5, 3.5, -1.5, -2.5, -3.5],
    (3, 6): [1.5, -2.5, 3.5, -1.5, 2.5, -3.5],
    (3, 7): [1.5, -2.5, 3, -1.5, 2.5, -3],
    (4, 1): [1.5, 2.5, -1.5, -2.5, 3.5, 4.5, -3.5, -4.5],
    (4, 2): [1.5, 2.5, -1.5, -2.5, 3, 4, -3, -4],
    (4, 3): [1.5, 2.5, -1.5, -2.5, 3.5, -4.5, -3.5, 4.5],
    (4, 4): [1.5, 2.5, -1.5, -2.5, 3.5, -4, -3.5, 4],
    (4, 5): [1.5, 2.5, -1.5, -2.5, 3, -4.5, -3, 4.5],
    (4, 6): [1.5, 2.5, -1.5, -2.5, 3, -4, -3, 4],
    (4, 7): [1.5, 2.5, -1.5, -2.5, -3.5, -4.5, 3.5, 4.5],
    (4, 8): [1.5, 2.5, -1.5, -2.5, -3, -4, 3, 4],
    (4, 9): [1.5, 2.5, -1.5, 3.5, -2.5, 4.5, -3.5, -4.5],
    (4, 10): [1.5, 2.5, -1.5, 3.5, -2.5, 4, -3.5, -4],
    (4, 11): [1.5, 2.5, -1.5, 3, -2.5, 4.5, -3, -4.5],
    (4, 12): [1.5, 2.5, -1.5, 3, -2.5, 4, -3, -4],
    (4, 13): [1.5, 2, -1.5, 3.5, -2, 4, -3.5, -4],
    (4, 14): [1.5, 2, -1.5, 3, -2, 4.5, -3, -4.5],
    (4, 15): [1.5, 2.5, -1.5, 3.5, -2.5, -4.5, -3.5, 4.5],
    (4, 16): [1.5, 2.5, -1.5, 3.5, -2.5, -4, -3.5, 4],
    (4, 17): [1.5, 2.5, -1.5, 3, -2.5, -4, -3, 4],
    (4, 18): [1.5, 2, -1.5, 3.5, -2, -4.5, -3.5, 4.5],
    (4, 19): [1.5, 2, -1.5, 3.5, -2, -4, -3.5, 4],
    (4, 20): [1.5, 2, -1.5, 3, -2, -4.5, -3, 4.5],
    (4, 21): [1.5, 2, -1.5, 3, -2, -4, -3, 4],
    (4, 22): [1.5, 2.5, -1.5, 3, 4, -2.5, -3, -4],
    (4, 23): [1.5, 2, -1.5, 3.5, 4.5, -2, -3.5, -4.5],
    (4, 24): [1.5, 2, -1.5, 3, 4, -2, -3, -4],
    (4, 25): [1.5, 2.5, -1.5, 3.5, 4.5, -2.5, -4.5, -3.5],
    (4, 26): [1.5, 2.5, -1.5, 3, 4, -2.5, -4, -3],
    (4, 27): [1.5, 2, -1.5, 3.5, 4.5, -2, -4.5, -3.5],
    (4, 28): [1.5, 2, -1.5, 3, 4, -2, -4, -3],
    (4, 29): [1.5, 2.5, -1.5, 3.5, 4.5, -3.5, -2.5, -4.5],
    (4, 30): [1.5, 2.5, -1.5, 3.5, 4, -3.5, -2.5, -4],
    (4, 31): [1.5, 2.5, -1.5, 3, 4.5, -3, -2.5, -4.5],
    (4, 32): [1.5, 2.5, -1.5, 3, 4, -3, -2.5, -4],
    (4, 33): [1.5, 2, -1.5, 3.5, 4.5, -3.5, -2, -4.5],
    (4, 34): [1.5, 2, -1.5, 3.5, 4, -3.5, -2, -4],
    (4, 35): [1.5, 2, -1.5, 3, 4.5, -3, -2, -4.5],
    (4, 36): [1.5, 2, -1.5, 3, 4, -3, -2, -4],
    (4, 37): [1.5, 2.5, -1.5, 3.5, -4.5, -2.5, -3.5, 4.5],
    (4, 38): [1.5, 2.5, -1.5, 3.5, -4, -2.5, -3.5, 4],
    (4, 39): [1.5, 2.5, -1.5, 3, -4.5, -2.5, -3, 4.5],
    (4, 40): [1.5, 2.5, -1.5, 3, -4, -2.5, -3, 4],
    (4, 41): [1.5, 2, -1.5, 3.5, -4.5, -2, -3.5, 4.5],
    (4, 42): [1.5, 2, -1.5, 3, -4.5, -2, -3, 4.5],
    (4, 43): [1.5, 2.5, -1.5, 3.5, -4.5, -2.5, 4.5, -3.5],
    (4, 44): [1.5, 2.5, -1.5, 3.5, -4, -2.5, 4, -3.5],
    (4, 45): [1.5, 2.5, -1.5, 3, -4.5, -2.5, 4.5, -3],
    (4, 46): [1.5, 2.5, -1.5, 3, -4, -2.5, 4, -3],
    (4, 47): [1.5, 2, -1.5, 3, -4.5, -2, 4.5, -3],
    (4, 48): [1.5, 2.5, -1.5, 3.5, -4.5, -3.5, -2.5, 4.5],
    (4, 49): [1.5, 2.5, -1.5, 3.5, -4, -3.5, -2.5, 4],
    (4, 50): [1.5, 2.5, -1.5, 3, -4.5, -3, -2.5, 4.5],
    (4, 51): [1.5, 2.5, -1.5, 3, -4, -3, -2.5, 4],
    (4, 52): [1.5, 2, -1.5, 3.5, -4, -3.5, -2, 4],
    (4, 53): [1.5, 2.5, -1.5, 3.5, -4.5, -3.5, 4.5, -2.5],
    (4, 54): [1.5, 2.5, -1.5, 3.5, -4, -3.5, 4, -2.5],
    (4, 55): [1.5, 2, -1.5, 3.5, -4, -3.5, 4, -2],
    (4, 56): [1.5, 2, -1.5, 3, -4.5, -3, 4.5, -2],
    (4, 57): [1.5, 2.5, -1.5, -3.5, -2.5, -4, 3.5, 4],
    (4, 58): [1.5, 2.5, -1.5, -3, -2.5, -4, 3, 4],
    (4, 59): [1.5, 2, -1.5, -3.5, -2, -4, 3.5, 4],
    (4, 60): [1.5, 2, -1.5, -3, -2, -4.5, 3, 4.5],
    (4, 61): [1.5, 2.5, -1.5, -3.5, 4.5, -2.5, 3.5, -4.5],
    (4, 62): [1.5, 2.5, -1.5, -3.5, 4, -2.5, 3.5, -4],
    (4, 63): [1.5, 2.5, -1.5, -3, 4.5, -2.5, 3, -4.5],
    (4, 64): [1.5, 2.5, -1.5, -3, 4, -2.5, 3, -4],
    (4, 65): [1.5, 2, -1.5, -3.5, 4.5, -2, 3.5, -4.5],
    (4, 66): [1.5, 2, -1.5, -3.5, 4, -2, 3.5, -4],
    (4, 67): [1.5, 2, -1.5, -3, 4.5, -2, 3, -4.5],
    (4, 68): [1.5, 2, -1.5, -3, 4, -2, 3, -4],
    (4, 69): [1.5, 2.5, -1.5, -3.5, 4.5, 3.5, -2.5, -4.5],
    (4, 70): [1.5, 2.5, -1.5, -3, 4.5, 3, -2.5, -4.5],
    (4, 71): [1.5, 2.5, -1.5, -3, 4, 3, -2.5, -4],
    (4, 72): [1.5, 2, -1.5, -3, 4.5, 3, -2, -4.5],
    (4, 73): [1.5, 2.5, -1.5, -3.5, 4.5, 3.5, -4.5, -2.5],
    (4, 74): [1.5, 2.5, -1.5, -3.5, 4, 3.5, -4, -2.5],
    (4, 75): [1.5, 2.5, -1.5, -3, 4, 3, -4, -2.5],
    (4, 76): [1.5, 2, -1.5, -3.5, 4, 3.5, -4, -2],
    (4, 77): [1.5, 2, -1.5, -3, 4.5, 3, -4.5, -2],
    (4, 78): [1.5, 2.5, -1.5, -3.5, -4.5, -2.5, 3.5, 4.5],
    (4, 79): [1.5, 2, -1.5, -3.5, -4.5, -2, 3.5, 4.5],
    (4, 80): [1.5, 2.5, -1.5, -3.5, -4.5, -2.5, 4.5, 3.5],
    (4, 81): [1.5, 2, -1.5, -3.5, -4.5, -2, 4.5, 3.5],
    (4, 82): [1.5, 2.5, 3.5, -1.5, 4.5, -2.5, -3.5, -4.5],
    (4, 83): [1.5, 2.5, 3.5, -1.5, 4, -2.5, -3.5, -4],
    (4, 84): [1.5, 2, 3, -1.5, 4.5, -2, -3, -4.5],
    (4, 85): [1.5, 2.5, 3.5, -1.5, 4, -3.5, -2.5, -4],
    (4, 86): [1.5, 2, 3, -1.5, 4.5, -3, -2, -4.5],
    (4, 87): [1.5, 2.5, 3.5, -1.5, -4.5, -2.5, -3.5, 4.5],
    (4, 88): [1.5, 2, 3, -1.5, -4.5, -2, -3, 4.5],
    (4, 89): [1.5, 2.5, 3.5, -1.5, -4.5, -3.5, -2.5, 4.5],
    (4, 90): [1.5, 2, 3, -1.5, -4.5, -3, -2, 4.5],
    (4, 91): [1.5, 2.5, 3.5, 4.5, -1.5, -2.5, -3.5, -4.5],
    (4, 92): [1.5, 2.5, 3.5, 4.5, -1.5, -3.5, -2.5, -4.5],
    (4, 93): [1.5, 2.5, 3.5, 4, -1.5, -3.5, -2.5, -4],
    (4, 94): [1.5, 2.5, -3.5, -1.5, 4.5, -2.5, 3.5, -4.5],
    (4, 95): [1.5, 2.5, -3.5, -1.5, 4, -2.5, 3.5, -4],
    (4, 96): [1.5, 2.5, -3, -1.5, 4.5, -2.5, 3, -4.5],
    (4, 97): [1.5, 2.5, -3, -1.5, 4, -2.5, 3, -4],
    (4, 98): [1.5, 2.5, -3, -1.5, 4, 3, -2.5, -4],
    (4, 99): [1.5, 2, -3, -1.5, 4.5, 3, -2, -4.5],
    (4, 100): [1.5, 2.5, -3.5, 4.5, -1.5, -2.5, 3.5, -4.5],
    (4, 101): [1.5, 2.5, -3.5, 4, -1.5, -2.5, 3.5, -4],
    (4, 102): [1.5, 2.5, -3, 4, -1.5, -2.5, 3, -4],
    (4, 103): [1.5, 2.5, -3.5, 4, -2.5, -1.5, 3.5, -4],
    (4, 104): [1.5, 2.5, -3, 4, -2.5, -1.5, 3, -4],
    (4, 105): [1.5, -2.5, 3.5, -1.5, 4.5, -3.5, 2.5, -4.5],
    (4, 106): [1.5, -2.5, 3.5, -1.5, 4, -3.5, 2.5, -4],
    (4, 107): [1.5, -2.5, 3, -1.5, 4, -3, 2.5, -4],
    (4, 108): [1.5, -2, 3, -1.5, 4.5, -3, 2, -4.5],
}


# # Values represent where to slice gauss code to get a nice presentation of the knot
# cycle_rules = {
#     (5, 2): 4,
#     (6, 2): 1,
#     (6, 4): 3,
#     (6, 5): 3,
#     (7, 0): 0,
#     (7, 2): 2,
#     (7, 3): 2,
#     (7, 4): 4,
#     (7, 5): 5,
#     # (7,6):
#     (8, 1): 2,
#     (8, 4): 5,
#     (8, 6): 2,
#     (8, 8): 6,
# }

# # def apply_cycle_rules(gcode_dict):
# #     new_dict = {}
# #     for key in gcode_dict:
# #         knot = gcode_dict[key]
# #         i
# #         new_dict[key] =
